Grammar

    0 $accept: line_list $end

    1 line_list: line
    2          | line_list line

    3 line: define CR

    4 define: DEF_INT VAR END
    5       | DEF_DOUBLE VAR END
    6       | DEF_CHAR VAR END
    7       | DEF_INT VAR EQ INT END
    8       | DEF_INT VAR EQ CHAR END
    9       | DEF_DOUBLE VAR EQ DOUBLE END
   10       | DEF_DOUBLE VAR EQ INT END
   11       | DEF_CHAR VAR EQ CHAR END
   12       | DEF_CHAR VAR EQ INT END
   13       | DEF_BOOL VAR EQ BOOL END


Terminals, with rules where they appear

$end (0) 0
error (256)
DEF_INT (258) 4 7 8
DEF_DOUBLE (259) 5 9 10
DEF_CHAR (260) 6 11 12
DEF_BOOL (261) 13
INT (262) 7 10 12
DOUBLE (263) 9
CHAR (264) 8 11
BOOL (265) 13
VAR (266) 4 5 6 7 8 9 10 11 12 13
EQ (267) 7 8 9 10 11 12 13
END (268) 4 5 6 7 8 9 10 11 12 13
CR (269) 3


Nonterminals, with rules where they appear

$accept (15)
    on left: 0
line_list (16)
    on left: 1 2, on right: 0 2
line (17)
    on left: 3, on right: 1 2
define (18)
    on left: 4 5 6 7 8 9 10 11 12 13, on right: 3


state 0

    0 $accept: . line_list $end

    DEF_INT     shift, and go to state 1
    DEF_DOUBLE  shift, and go to state 2
    DEF_CHAR    shift, and go to state 3
    DEF_BOOL    shift, and go to state 4

    line_list  go to state 5
    line       go to state 6
    define     go to state 7


state 1

    4 define: DEF_INT . VAR END
    7       | DEF_INT . VAR EQ INT END
    8       | DEF_INT . VAR EQ CHAR END

    VAR  shift, and go to state 8


state 2

    5 define: DEF_DOUBLE . VAR END
    9       | DEF_DOUBLE . VAR EQ DOUBLE END
   10       | DEF_DOUBLE . VAR EQ INT END

    VAR  shift, and go to state 9


state 3

    6 define: DEF_CHAR . VAR END
   11       | DEF_CHAR . VAR EQ CHAR END
   12       | DEF_CHAR . VAR EQ INT END

    VAR  shift, and go to state 10


state 4

   13 define: DEF_BOOL . VAR EQ BOOL END

    VAR  shift, and go to state 11


state 5

    0 $accept: line_list . $end
    2 line_list: line_list . line

    $end        shift, and go to state 12
    DEF_INT     shift, and go to state 1
    DEF_DOUBLE  shift, and go to state 2
    DEF_CHAR    shift, and go to state 3
    DEF_BOOL    shift, and go to state 4

    line    go to state 13
    define  go to state 7


state 6

    1 line_list: line .

    $default  reduce using rule 1 (line_list)


state 7

    3 line: define . CR

    CR  shift, and go to state 14


state 8

    4 define: DEF_INT VAR . END
    7       | DEF_INT VAR . EQ INT END
    8       | DEF_INT VAR . EQ CHAR END

    EQ   shift, and go to state 15
    END  shift, and go to state 16


state 9

    5 define: DEF_DOUBLE VAR . END
    9       | DEF_DOUBLE VAR . EQ DOUBLE END
   10       | DEF_DOUBLE VAR . EQ INT END

    EQ   shift, and go to state 17
    END  shift, and go to state 18


state 10

    6 define: DEF_CHAR VAR . END
   11       | DEF_CHAR VAR . EQ CHAR END
   12       | DEF_CHAR VAR . EQ INT END

    EQ   shift, and go to state 19
    END  shift, and go to state 20


state 11

   13 define: DEF_BOOL VAR . EQ BOOL END

    EQ  shift, and go to state 21


state 12

    0 $accept: line_list $end .

    $default  accept


state 13

    2 line_list: line_list line .

    $default  reduce using rule 2 (line_list)


state 14

    3 line: define CR .

    $default  reduce using rule 3 (line)


state 15

    7 define: DEF_INT VAR EQ . INT END
    8       | DEF_INT VAR EQ . CHAR END

    INT   shift, and go to state 22
    CHAR  shift, and go to state 23


state 16

    4 define: DEF_INT VAR END .

    $default  reduce using rule 4 (define)


state 17

    9 define: DEF_DOUBLE VAR EQ . DOUBLE END
   10       | DEF_DOUBLE VAR EQ . INT END

    INT     shift, and go to state 24
    DOUBLE  shift, and go to state 25


state 18

    5 define: DEF_DOUBLE VAR END .

    $default  reduce using rule 5 (define)


state 19

   11 define: DEF_CHAR VAR EQ . CHAR END
   12       | DEF_CHAR VAR EQ . INT END

    INT   shift, and go to state 26
    CHAR  shift, and go to state 27


state 20

    6 define: DEF_CHAR VAR END .

    $default  reduce using rule 6 (define)


state 21

   13 define: DEF_BOOL VAR EQ . BOOL END

    BOOL  shift, and go to state 28


state 22

    7 define: DEF_INT VAR EQ INT . END

    END  shift, and go to state 29


state 23

    8 define: DEF_INT VAR EQ CHAR . END

    END  shift, and go to state 30


state 24

   10 define: DEF_DOUBLE VAR EQ INT . END

    END  shift, and go to state 31


state 25

    9 define: DEF_DOUBLE VAR EQ DOUBLE . END

    END  shift, and go to state 32


state 26

   12 define: DEF_CHAR VAR EQ INT . END

    END  shift, and go to state 33


state 27

   11 define: DEF_CHAR VAR EQ CHAR . END

    END  shift, and go to state 34


state 28

   13 define: DEF_BOOL VAR EQ BOOL . END

    END  shift, and go to state 35


state 29

    7 define: DEF_INT VAR EQ INT END .

    $default  reduce using rule 7 (define)


state 30

    8 define: DEF_INT VAR EQ CHAR END .

    $default  reduce using rule 8 (define)


state 31

   10 define: DEF_DOUBLE VAR EQ INT END .

    $default  reduce using rule 10 (define)


state 32

    9 define: DEF_DOUBLE VAR EQ DOUBLE END .

    $default  reduce using rule 9 (define)


state 33

   12 define: DEF_CHAR VAR EQ INT END .

    $default  reduce using rule 12 (define)


state 34

   11 define: DEF_CHAR VAR EQ CHAR END .

    $default  reduce using rule 11 (define)


state 35

   13 define: DEF_BOOL VAR EQ BOOL END .

    $default  reduce using rule 13 (define)
